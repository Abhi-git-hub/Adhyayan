<%- include('../partials/header') %>

<div class="container mt-4">
  <h2>Add Test Scores</h2>
  
  <!-- Batch Selection -->
  <div class="mb-4">
    <label for="batchSelect" class="form-label">Select Batch</label>
    <select class="form-select" id="batchSelect">
      <% batches.forEach(batch => { %>
        <option value="<%= batch %>"><%= batch %></option>
      <% }); %>
    </select>
  </div>
  
  <!-- Subject Selection -->
  <div class="mb-4">
    <label for="subjectSelect" class="form-label">Select Subject</label>
    <select class="form-select" id="subjectSelect">
      <% subjects.forEach(subject => { %>
        <option value="<%= subject %>"><%= subject %></option>
      <% }); %>
    </select>
  </div>
  
  <!-- Test Details -->
  <div class="mb-4">
    <label for="testName" class="form-label">Test Name</label>
    <input type="text" class="form-control" id="testName" required>
  </div>
  
  <!-- Student Scores Form -->
  <div id="scoresForm">
    <% batches.forEach(batch => { %>
      <div class="batch-section" data-batch="<%= batch %>" style="display: none;">
        <h3><%= batch %> Batch</h3>
        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Student Name</th>
                <th>Score</th>
                <th>Max Score</th>
                <th>Remarks</th>
              </tr>
            </thead>
            <tbody>
              <% studentsByBatch[batch].forEach(student => { %>
                <tr>
                  <td><%= student.name %></td>
                  <td>
                    <input type="number" class="form-control score-input" data-student-id="<%= student._id %>" min="0" required>
                  </td>
                  <td>
                    <input type="number" class="form-control max-score-input" data-student-id="<%= student._id %>" min="0" required>
                  </td>
                  <td>
                    <input type="text" class="form-control remarks-input" data-student-id="<%= student._id %>" placeholder="Optional remarks">
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      </div>
    <% }); %>
  </div>
  
  <!-- Submit Button -->
  <button class="btn btn-primary" id="submitScores">Submit Scores</button>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const batchSelect = document.getElementById('batchSelect');
  const subjectSelect = document.getElementById('subjectSelect');
  const testNameInput = document.getElementById('testName');
  const batchSections = document.querySelectorAll('.batch-section');
  const submitButton = document.getElementById('submitScores');
  
  // Show selected batch section
  function showBatchSection(batch) {
    batchSections.forEach(section => {
      section.style.display = section.dataset.batch === batch ? 'block' : 'none';
    });
  }
  
  // Initial display
  showBatchSection(batchSelect.value);
  
  // Handle batch selection change
  batchSelect.addEventListener('change', function() {
    showBatchSection(this.value);
  });
  
  // Handle scores submission
  submitButton.addEventListener('click', async function() {
    const batch = batchSelect.value;
    const subject = subjectSelect.value;
    const testName = testNameInput.value;
    
    if (!testName) {
      alert('Please enter a test name');
      return;
    }
    
    const currentSection = document.querySelector(`[data-batch="${batch}"]`);
    const rows = currentSection.querySelectorAll('tr');
    
    try {
      for (const row of rows) {
        const studentId = row.querySelector('.score-input').dataset.studentId;
        const score = row.querySelector('.score-input').value;
        const maxScore = row.querySelector('.max-score-input').value;
        const remarks = row.querySelector('.remarks-input').value;
        
        if (!score || !maxScore) {
          alert('Please fill in all required fields');
          return;
        }
        
        const response = await fetch('/teacher/test-scores/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            studentId,
            subject,
            testName,
            score,
            maxScore,
            remarks
          })
        });
        
        const result = await response.json();
        
        if (!result.success) {
          throw new Error(result.error);
        }
      }
      
      alert('Test scores added successfully!');
      // Clear form
      testNameInput.value = '';
      currentSection.querySelectorAll('.score-input, .max-score-input, .remarks-input').forEach(input => {
        input.value = '';
      });
    } catch (error) {
      console.error('Error:', error);
      alert('Error adding test scores: ' + error.message);
    }
  });
});
</script>

<%- include('../partials/footer') %> 